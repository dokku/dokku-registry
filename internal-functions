#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x


fn-registry-enabled() {
  declare desc="check if registry is enabled for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_SERVER REGISTRY_ENABLED

  DOKKU_REGISTRY_SERVER=$(fn-plugin-property-get "registry" "$APP" "server" "")
  REGISTRY_ENABLED=false
  if [[ -n "$DOKKU_REGISTRY_SERVER" ]]; then
    REGISTRY_ENABLED=true
  fi
  echo "$REGISTRY_ENABLED"
}

fn-registry-pull() {
  declare desc="pull an image from an remote repository"
  declare APP="$1" TAG="$2"
  local DOKKU_REGISTRY_SERVER IMAGE_REPO

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  if [[ -z "$TAG" ]]; then
    dokku_log_fail "No tag specified"
  fi

  dokku_log_verbose_quiet "Retrieving image info for application"
  DOKKU_REGISTRY_SERVER=$(fn-registry-remote-repository "$APP")
  IMAGE_REPO=$(fn-registry-image-repo "$APP")

  dokku_log_verbose_quiet "Pulling $IMAGE_REPO:$TAG"
  docker pull "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}"

  dokku_log_verbose_quiet "Tagging $IMAGE_REPO:$TAG as $IMAGE_REPO:latest"
  docker tag "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}" "${IMAGE_REPO}:latest"
  docker tag "${IMAGE_REPO}:${TAG}" "${IMAGE_REPO}:latest"
  dokku_log_verbose_quiet "Image $IMAGE_REPO:$TAG pulled"
}

fn-registry-create-repository() {
  declare APP="$1" DOKKU_REGISTRY_SERVER="$2" IMAGE_REPO="$3"

  [[ -z "$DOKKU_REGISTRY_SERVER" ]] && DOKKU_REGISTRY_SERVER=$(fn-registry-remote-repository "$APP")
  [[ -z "$IMAGE_REPO" ]] && IMAGE_REPO=$(fn-registry-image-repo "$APP")

  fn-registry-create-repository-ecr "$DOKKU_REGISTRY_SERVER" "$IMAGE_REPO"
}

fn-registry-create-repository-ecr() {
  declare DOKKU_REGISTRY_SERVER="$1" IMAGE_REPO="$2"
  local AWS_REGION EXISTING_AWS_REPOSITORY

  if [[ "$DOKKU_REGISTRY_SERVER" == *amazonaws.com* ]] && [[ "$DOKKU_REGISTRY_SERVER" == *.dkr.ecr.* ]]; then
    AWS_REGION="$(echo "$DOKKU_REGISTRY_SERVER" | cut -d'.' -f4)"
    EXISTING_AWS_REPOSITORY="$(aws ecr describe-repositories --repository-names "${IMAGE_REPO}"  --region "$AWS_REGION" --query "repositories[0].repositoryName" --output text 2>/dev/null || true)"
    if [[ -z "$EXISTING_AWS_REPOSITORY" ]]; then
      aws ecr create-repository --repository-name "${IMAGE_REPO}" --region "$AWS_REGION" >/dev/null || dokku_log_fail "Failed to create ecr repository"
    fi
  fi
}

fn-registry-push() {
  declare desc="push an image to an remote repository"
  declare APP="$1" TAG="$2"
  local DOCKER_HOST DOKKU_DEFAULT_DOCKER_ARGS DOKKU_REGISTRY_SERVER EXISTING_AWS_REPOSITORY IMAGE IMAGE_ID IMAGE_REPO IMAGE_TAG

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  if [[ -z "$TAG" ]]; then
    dokku_log_fail "No tag specified"
  fi

  dokku_log_verbose_quiet "Retrieving image info for application"
  DOKKU_REGISTRY_SERVER=$(fn-registry-remote-repository "$APP")
  IMAGE_REPO=$(fn-registry-image-repo "$APP")
  IMAGE_TAG="$(get_running_image_tag "$APP")"
  IMAGE=$(get_app_image_name "$APP" "$IMAGE_TAG")
  IMAGE_ID=$(docker inspect --format '{{ .Id }}' "$IMAGE")

  dokku_log_verbose_quiet "Tagging $IMAGE_REPO:$TAG in registry format"
  docker tag "$IMAGE_ID" "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}"
  docker tag "$IMAGE_ID" "${IMAGE_REPO}:${TAG}"

  fn-registry-create-repository "$APP" "$DOKKU_REGISTRY_SERVER" "$IMAGE_REPO"

  dokku_log_verbose_quiet "Pushing $IMAGE_REPO:$TAG"
  docker push "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}"

  dokku_log_verbose_quiet "Cleaning up"
  fn-registry-image-cleanup "$APP" "$DOKKU_REGISTRY_SERVER" "$IMAGE_REPO" "$IMAGE_TAG" "$TAG"

  dokku_log_verbose_quiet "Image $IMAGE_REPO:$TAG pushed"
}

fn-registry-image-cleanup() {
  declare desc="cleans up old docker images for the app"
  declare APP="$1" DOKKU_REGISTRY_SERVER="$2" IMAGE_REPO="$3" IMAGE_TAG="$4" TAG="$5"
  DOKKU_DEFAULT_DOCKER_ARGS=$(: | plugn trigger docker-args-deploy "$APP" "$IMAGE_TAG")
  # shellcheck disable=SC2086
  DOCKER_HOST="$(echo $DOKKU_DEFAULT_DOCKER_ARGS | grep -Eo "^-H (.*)" | cut -d' ' -f2 || true)"

  # keep last two images in place
  OLD_TAG=$((TAG - 2))

  # cleanup up to 10 old images
  TEN_IMAGES_AGO_TAG=$((TAG - 12))
  while [[ "$OLD_TAG" -gt 0 ]]; do
    docker rmi "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${OLD_TAG}" &>/dev/null || true
    docker rmi "${IMAGE_REPO}:${OLD_TAG}" &>/dev/null || true
    if [[ -n "$DOCKER_HOST" ]]; then
      docker -H "$DOCKER_HOST" rmi "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${OLD_TAG}" &>/dev/null || true
      docker -H "$DOCKER_HOST" rmi "${IMAGE_REPO}:${OLD_TAG}" &>/dev/null || true
    fi
    OLD_TAG=$((OLD_TAG - 1))
    if [[ "$TEN_IMAGES_AGO_TAG" == "$OLD_TAG" ]]; then
      break
    fi
  done

  docker rmi "$(docker images "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}" --filter "dangling=true" --format '{{.ID}}')" &>/dev/null || true
  docker rmi "$(docker images "${IMAGE_REPO}" --filter "dangling=true" --format '{{.ID}}')" &>/dev/null || true
  if [[ -n "$DOCKER_HOST" ]]; then
    docker -H "$DOCKER_HOST" rmi "$(docker images "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}" --filter "dangling=true" --format '{{.ID}}')" &>/dev/null || true
    docker -H "$DOCKER_HOST" rmi "$(docker images "${IMAGE_REPO}" --filter "dangling=true" --format '{{.ID}}')" &>/dev/null || true
  fi
}

fn-registry-image-repo() {
  declare desc="retrieves the image repo name (normally dokku/APP) for a given app"
  declare APP="$1"
  local IMAGE_REPO

  IMAGE_REPO=$(get_app_image_repo "$APP")
  IMAGE_REPO=$(fn-plugin-property-get "registry" "$APP" "image-repo" "$IMAGE_REPO")
  echo "$IMAGE_REPO"
}

fn-registry-remote-repository() {
  declare desc="retrieves the remote repository for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_SERVER

  DOKKU_REGISTRY_SERVER=$(fn-plugin-property-get "registry" "$APP" "server" "")
  if [[ -n "$DOKKU_REGISTRY_SERVER" ]]; then
    DOKKU_REGISTRY_SERVER="${DOKKU_REGISTRY_SERVER%/}/"
  fi

  if [[ "$DOKKU_REGISTRY_SERVER" == "hub.docker.com/" ]]; then
    return
  fi

  echo "$DOKKU_REGISTRY_SERVER"
}

fn-registry-tag-increment() {
  declare desc="increments the latest tag version for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_TAG_VERSION

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$(fn-plugin-property-get "registry" "$APP" "tag-version" "")
  if [[ -z "$DOKKU_REGISTRY_TAG_VERSION" ]]; then
    DOKKU_REGISTRY_TAG_VERSION=0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$((DOKKU_REGISTRY_TAG_VERSION + 1))
  dokku_log_verbose_quiet "Bumping tag to $DOKKU_REGISTRY_TAG_VERSION"
  fn-plugin-property-write "registry" "$APP" "tag-version" "$DOKKU_REGISTRY_TAG_VERSION"
}

fn-registry-tag-latest-local() {
  declare desc="retrieves the latest tag for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_TAG_VERSION

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$(fn-plugin-property-get "registry" "$APP" "tag-version" "")
  if [[ -z "$DOKKU_REGISTRY_TAG_VERSION" ]]; then
    echo 1
  fi

  echo "$DOKKU_REGISTRY_TAG_VERSION"
}

fn-registry-help-content() {
  declare desc="return registry plugin help content"
  cat <<help_content
    ${PLUGIN_COMMAND_PREFIX} <app>, Display the configured registry status for an application
    ${PLUGIN_COMMAND_PREFIX}:cleanup <app>, Cleans up old local images
    ${PLUGIN_COMMAND_PREFIX}:create-repository <app>, Creates an image repository on the remote server
    ${PLUGIN_COMMAND_PREFIX}:login <server> <username> <password>, Logs into a docker registry
    ${PLUGIN_COMMAND_PREFIX}:pull <app> <tag>, Pull an image from the remote registry
    ${PLUGIN_COMMAND_PREFIX}:push <app> <tag>, Push an image to the remote registry
    ${PLUGIN_COMMAND_PREFIX}:report <app>, Display the configured registry status for an app
    ${PLUGIN_COMMAND_PREFIX}:set <app> <key> <value>, Set or clear a key
help_content
}

cmd-registry-help() {
  if [[ $1 == "${PLUGIN_COMMAND_PREFIX}:help" ]]; then
    echo -e "Usage: dokku ${PLUGIN_COMMAND_PREFIX}[:COMMAND] <app> [args...]"
    echo ''
    echo 'Manages interaction with remote Docker Registries.'
    echo ''
    echo 'Additional commands:'
    fn-registry-help-content | sort | column -c2 -t -s,
  elif [[ $(ps -o command= $PPID) == *"--all"* ]]; then
    fn-registry-help-content
  else
    cat <<help_desc
    ${PLUGIN_COMMAND_PREFIX}, Manages interaction with remote Docker Registries
help_desc
  fi
}

cmd-registry-report() {
  declare desc="Display the configured registry status for an application"
  declare cmd="registry:report"
  local INSTALLED_APPS=$(dokku_apps)
  local APP="$2" INFO_FLAG="$3"

  if [[ -n "$APP" ]] && [[ "$APP" == --* ]]; then
    INFO_FLAG="$APP"
    APP=""
  fi

  if [[ -z "$APP" ]] && [[ -z "$INFO_FLAG" ]]; then
    INFO_FLAG="true"
  fi

  if [[ -z "$APP" ]]; then
    for app in $INSTALLED_APPS; do
      cmd-registry-report-single "$app" "$INFO_FLAG" | tee || true
    done
  else
    cmd-registry-report-single "$APP" "$INFO_FLAG"
  fi
}

cmd-registry-report-single() {
  declare APP="$1" INFO_FLAG="$2"
  if [[ "$INFO_FLAG" == "true" ]]; then
    INFO_FLAG=""
  fi
  verify_app_name "$APP"
  flag_map=(
    "--registry-enabled: $(fn-registry-enabled "$APP")"
    "--registry-image: $(fn-registry-image-repo "$APP")"
    "--registry-server: $(fn-registry-remote-repository "$APP")"
    "--registry-tag-latest-local: $(fn-registry-tag-latest-local "$APP")"
  )
  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2_quiet "${APP} registry information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-20s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    local match=false
    local value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    [[ "$match" == "true" ]] || dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    [[ "$value_exists" == "true" ]] || echo ""
  fi
}
