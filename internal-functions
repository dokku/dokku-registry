#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

fn-registry-config-delete() {
  declare desc="delete a key from the dokku-registry configuration for an app"
  declare APP="$1" KEY="$2"
  verify_app_name "$APP"

  rm -f "${PLUGIN_CONFIG_ROOT}/${APP}/${KEY}"
}

fn-registry-config-destroy() {
  declare desc="destroy the dokku-registry configuration for an app"
  declare APP="$1"

  if [[ "$APP" == "_all_" ]]; then
    rm -rf "${PLUGIN_CONFIG_ROOT:?}"
  else
    verify_app_name "$APP"
    rm -rf "${PLUGIN_CONFIG_ROOT:?}/${APP}"
  fi
}

fn-registry-config-get() {
  declare desc="returns the configured key for an app"
  declare APP="$1" KEY="$2" DEFAULT="$3"
  local CONFIG_VALUE
  verify_app_name "$APP"

  CONFIG_VALUE="$(fn-registry-config-read "$APP" "$KEY" || true)"
  if [[ -z "$CONFIG_VALUE" ]]; then
    CONFIG_VALUE="$DEFAULT"
  fi
  echo "$CONFIG_VALUE"
}

fn-registry-config-read() {
  declare desc="read a key from the dokku-registry configuration for an app"
  declare APP="$1" KEY="$2"
  verify_app_name "$APP"
  
  if [[ ! -f "${PLUGIN_CONFIG_ROOT}/${APP}/${KEY}" ]]; then
    exit 1
  fi

  cat "${PLUGIN_CONFIG_ROOT}/${APP}/${KEY}"
}

fn-registry-config-write() {
  declare desc="read a key from the dokku-registry configuration for an app"
  declare APP="$1" KEY="$2" VALUE="$3"
  verify_app_name "$APP"

  mkdir -p "${PLUGIN_CONFIG_ROOT}/${APP}"
  echo "$VALUE" > "${PLUGIN_CONFIG_ROOT}/${APP}/${KEY}"
  chmod 600 "${PLUGIN_CONFIG_ROOT}/${APP}/${KEY}"
}

fn-registry-enabled() {
  declare desc="check if registry is enabled for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_SERVER REGISTRY_ENABLED
  verify_app_name "$APP"

  DOKKU_REGISTRY_SERVER=$(fn-registry-config-get "$APP" "server")
  REGISTRY_ENABLED=false
  if [[ -n "$DOKKU_REGISTRY_SERVER" ]]; then
    REGISTRY_ENABLED=true
  fi
  echo "$REGISTRY_ENABLED"
}

fn-registry-pull() {
  declare desc="pull an image from an remote repository"
  declare APP="$1" TAG="$2"
  local DOKKU_REGISTRY_SERVER IMAGE_REPO
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  if [[ -z "$TAG" ]]; then
    dokku_log_fail "No tag specified"
  fi

  dokku_log_verbose_quiet "Retrieving image info for application"
  DOKKU_REGISTRY_SERVER=$(fn-registry-remote-repository "$APP")
  IMAGE_REPO=$(get_app_image_repo "$APP")
  IMAGE_REPO=$(fn-registry-config-get "$APP" "image" "$IMAGE_REPO")

  dokku_log_verbose_quiet "Pulling $IMAGE_REPO:$TAG"
  docker pull "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}" | sed "s/^/       /"

  dokku_log_verbose_quiet "Tagging $IMAGE_REPO:$TAG as $IMAGE_REPO:latest"
  docker tag "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}" "${IMAGE_REPO}:latest"
  docker tag "${IMAGE_REPO}:${TAG}" "${IMAGE_REPO}:latest"
  dokku_log_verbose_quiet "Image $IMAGE_REPO:$TAG pulled"
}

fn-registry-push() {
  declare desc="push an image to an remote repository"
  declare APP="$1" TAG="$2"
  local DOCKER_HOST DOKKU_DEFAULT_DOCKER_ARGS DOKKU_REGISTRY_SERVER IMAGE IMAGE_ID IMAGE_REPO IMAGE_TAG
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  if [[ -z "$TAG" ]]; then
    dokku_log_fail "No tag specified"
  fi

  dokku_log_verbose_quiet "Retrieving image info for application"
  DOKKU_REGISTRY_SERVER=$(fn-registry-remote-repository "$APP")
  IMAGE_REPO=$(get_app_image_repo "$APP")
  IMAGE_REPO=$(fn-registry-config-get "$APP" "image" "$IMAGE_REPO")
  IMAGE_TAG="$(get_running_image_tag "$APP")"
  IMAGE=$(get_app_image_name "$APP" "$IMAGE_TAG")
  IMAGE_ID=$(docker inspect --format '{{ .Id }}' "$IMAGE")

  dokku_log_verbose_quiet "Tagging $IMAGE_REPO:$TAG in registry format"
  docker tag "$IMAGE_ID" "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}"
  docker tag "$IMAGE_ID" "${IMAGE_REPO}:${TAG}"

  dokku_log_verbose_quiet "Pushing $IMAGE_REPO:$TAG"
  docker push "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${TAG}" | sed "s/^/       /"

  dokku_log_verbose_quiet "Cleaning up"
  OLD_TAG=$((TAG - 1))
  docker rmi "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${OLD_TAG}" &> /dev/null || true
  docker rmi "${IMAGE_REPO}:${OLD_TAG}" &> /dev/null || true

  DOKKU_DEFAULT_DOCKER_ARGS=$(: | plugn trigger docker-args-deploy "$APP" "$IMAGE_TAG")
  # shellcheck disable=SC2086
  DOCKER_HOST=$(echo $DOKKU_DEFAULT_DOCKER_ARGS | grep -Eo "^-H (.*)" | cut -d' ' -f2)
  if [[ -n "$DOCKER_HOST" ]]; then
    docker -H "$DOCKER_HOST" rmi "${DOKKU_REGISTRY_SERVER}${IMAGE_REPO}:${OLD_TAG}" &> /dev/null || true
    docker -H "$DOCKER_HOST" rmi "${IMAGE_REPO}:${OLD_TAG}" &> /dev/null || true
  fi

  dokku_log_verbose_quiet "Image $IMAGE_REPO:$TAG pushed"
}

fn-registry-remote-repository() {
  declare desc="retrieves the latest tag for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_SERVER
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_SERVER=$(fn-registry-config-get "$APP" "server")
  echo "$DOKKU_REGISTRY_SERVER"
}

fn-registry-tag-increment() {
  declare desc="increments the latest tag version for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_TAG_VERSION
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$(fn-registry-config-get "$APP" "tag-version")
  if [[ -z "$DOKKU_REGISTRY_TAG_VERSION" ]]; then
    DOKKU_REGISTRY_TAG_VERSION=0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$((DOKKU_REGISTRY_TAG_VERSION + 1))
  dokku_log_verbose_quiet "Bumping tag to $DOKKU_REGISTRY_TAG_VERSION"
  fn-registry-config-write "$APP" "tag-version" "$DOKKU_REGISTRY_TAG_VERSION"
}

fn-registry-tag-latest-local() {
  declare desc="retrieves the latest tag for an app"
  declare APP="$1"
  local DOKKU_REGISTRY_TAG_VERSION
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_TAG_VERSION=$(fn-registry-config-get "$APP" "tag-version")
  if [[ -z "$DOKKU_REGISTRY_TAG_VERSION" ]]; then
    echo 1
  fi

  echo "$DOKKU_REGISTRY_TAG_VERSION"
}

fn-registry-image-repo() {
  declare desc="retrieves the current image repo username prefixed to /APP"
  declare APP="$1"
  local DOKKU_REGISTRY_USERNAME
  verify_app_name "$APP"

  if [[ "$(fn-registry-enabled "$APP")" == "false" ]]; then
    return 0
  fi

  DOKKU_REGISTRY_USERNAME=$(fn-registry-config-get "$APP" "username")
  if [[ -z "$DOKKU_REGISTRY_USERNAME" ]]; then
    return
  fi

  echo "$DOKKU_REGISTRY_USERNAME/$APP"
}

fn-registry-help-content() {
  declare desc="return registry plugin help content"
  cat<<help_content
    ${PLUGIN_COMMAND_PREFIX} <app>, Display the configured registry status for an application
    ${PLUGIN_COMMAND_PREFIX}:login <server> <username> <password>, Logs into a docker registry
    ${PLUGIN_COMMAND_PREFIX}:pull <app> <tag>, Pull an image from the remote registry
    ${PLUGIN_COMMAND_PREFIX}:push <app> <tag>, Push an image to the remote registry
    ${PLUGIN_COMMAND_PREFIX}:set <app> <key> <value>, Set or clear a key
    ${PLUGIN_COMMAND_PREFIX}:tag-latest-local <app>, Shows latest local tag version
help_content
}

cmd-registry-help() {
  if [[ $1 = "${PLUGIN_COMMAND_PREFIX}:help" ]] ; then
    echo -e "Usage: dokku $PLUGIN_COMMAND_PREFIX[:COMMAND] <app> [<username>] [<tag>] [<username>] [<password>]"
    echo ''
    echo 'Manages interaction with remote Docker Registries.'
    echo ''
    echo 'Additional commands:'
    fn-registry-help-content | sort | column -c2 -t -s,
  elif [[ $(ps -o command= $PPID) == *"--all"* ]]; then
    fn-registry-help-content
  else
    cat<<help_desc
    ${PLUGIN_COMMAND_PREFIX}, Manages interaction with remote Docker Registries
help_desc
  fi
}

cmd-registry-report() {
  declare desc="Display the configured registry status for an application"
  declare cmd="$PLUGIN_COMMAND_PREFIX:report" argv=("$@"); [[ ${argv[0]} == "$cmd" ]] && shift 1
  declare APP="$1" INFO_FLAG="$2"
  local flag flag_map key match valid_flags value_exists
  [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
  verify_app_name "$APP"

  flag_map=(
    "--registry-enabled: $(fn-registry-enabled "$APP")"
    "--registry-image: $(fn-registry-config-get "$APP" "image")"
    "--registry-server: $(fn-registry-config-get "$APP" "server")"
    "--registry-tag-latest-local: $(fn-registry-tag-latest-local)"
    "--registry-username: $(fn-registry-config-get "$APP" "username")"
  )
  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2_quiet "${APP} Registry Information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-20s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    match=false
    value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    [[ "$match" == "true" ]] || dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    [[ "$value_exists" == "true" ]] || dokku_log_fail "not deployed"
  fi
}
